SOLID
خمسه مبادى البرمجه كانية التوجيه
1- single responsibility principle
مبدأ المسؤولية الواحدة.
كل كلاس يجب أن تكون لها مسؤولية واحدة فقط، بمعنى أنها يجب أن تتعامل مع نوع واحد من الوظائف أو السلوكيات. هذا يجعل الصيانة والتعديل أسهل وأكثر وضوحًا.
2- open / close principle
يجب أن تكون الفئات الكلاسات والكيانات البرمجية الأخرى مفتوحة للتمديد ولكن مغلقة للتعديل. بمعنى آخر، يجب أن يكون بإمكانك إضافة وظائف جديدة دون تغيير الكود الموجود.
3- lisoke substitution principle
مبدأ استبدال ليسكوف.
يجب أن يكون بالإمكان استخدام الكائنات من الفئات الفرعية مكان الكائنات من الفئة الأم دون التأثير على سلامة النظام. بمعنى آخر، يجب أن يتمكن برنامجك من استخدام كائنات من الفئات الفرعية كبدائل لكائنات من الفئة الأساسية دون حدوث أخطاء.
4- interface segregation principle
مبدأ تجزئة الواجهات.
يجب ألا يكون العملاء مجبرين على استخدام واجهات غير ضرورية لهم. من الأفضل إنشاء واجهات ضيقة متعددة بدلاً من واجهة كبيرة واحدة تحتوي على العديد من الوظائف التي قد لا تكون جميعها ضرورية لبعض العملاء.
5- dependency inversion principle 
مبدأ عكس الاعتمادية.
يجب أن تعتمد الفئات العليا  على التجريدات  وليس على الفئات الدنيا . بعبارة أخرى، يجب أن تكون الوحدات العليا من النظام غير معتمدة على الوحدات السفلى بشكل مباشر، وإنما على واجهات أو تجريدات عامة.